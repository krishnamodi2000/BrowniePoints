variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

default:
  image: maven:3.8.3-openjdk-17
  tags:
  - autoscale-runner.cs.dal.ca
  services: 
  - docker:dind

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  image: maven:3.8.3-openjdk-17
  script:
    - mvn -f backend/pom.xml install

test:
  stage: test
  image: maven:3.8.3-openjdk-17
  script:
    - mvn -f backend/pom.xml test

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name my-app $TAG_COMMIT"


# package:
#   stage: package
#   script: 
#     - echo "Maven Packaging Started"
#     - mvn clean package
#   artifacts:
#     paths:
#       - target/*.jar
#   only:
#     - main

# deploy:
#   stage: deploy
#   image: docker:19
#   services: 
#     - docker:19-dind
#   before_script:
#     - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
#     - docker build -t ${CONTAINER_TEST_IMAGE}
#     - docker push ${CONTAINER_TEST_IMAGE}
#     - docker logout
#   script:
#     - echo "Maven Deployment Started"






